{"version":3,"sources":["../src/h3.ts"],"sourcesContent":["import type { H3Event } from \"h3\";\nimport {\n  assertMethod,\n  defineEventHandler,\n  setHeader,\n  setResponseStatus,\n  toWebRequest,\n} from \"h3\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { defaultErrorFormatter } from \"./internal/error-formatter\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport { initLogger } from \"./internal/logger\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport type { FileRouter };\n\ntype MiddlewareArgs = { req: undefined; res: undefined; event: H3Event };\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<MiddlewareArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  initLogger(opts.config?.logLevel);\n  incompatibleNodeGuard();\n\n  const requestHandler = buildRequestHandler<TRouter, MiddlewareArgs>(\n    opts,\n    \"h3\",\n  );\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  return defineEventHandler(async (event) => {\n    assertMethod(event, [\"GET\", \"POST\"]);\n    setHeader(event, \"x-uploadthing-version\", UPLOADTHING_VERSION);\n\n    // GET\n    if (event.method === \"GET\") {\n      return getBuildPerms();\n    }\n\n    // POST\n    const response = await requestHandler({\n      nativeRequest: toWebRequest(event),\n      event,\n      originalRequest: undefined,\n      res: undefined,\n    });\n\n    if (response instanceof UploadThingError) {\n      setResponseStatus(event, getStatusCodeFromError(response));\n      const errorFormatter =\n        opts.router[Object.keys(opts.router)[0]]?._def.errorFormatter ??\n        defaultErrorFormatter;\n      return errorFormatter(response) as unknown;\n    }\n\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      setResponseStatus(event, 500);\n      return \"An unknown error occurred\";\n    }\n\n    return response.body ?? \"OK\";\n  });\n};\n\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */\nexport const createH3EventHandler = createRouteHandler;\n"],"mappings":";;;;;;;;;;;;;AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,SAAS,wBAAwB,wBAAwB;AAmBlD,IAAM,oBAAoB,CAC/B,SACG,cAA2C,IAAI;AAE7C,IAAM,qBAAqB,CAChC,SACG;AAnCL;AAoCE,cAAW,UAAK,WAAL,mBAAa,QAAQ;AAChC,wBAAsB;AAEtB,QAAM,iBAAiB;AAAA,IACrB;AAAA,IACA;AAAA,EACF;AACA,QAAM,gBAAgB,4BAAqC,IAAI;AAE/D,SAAO,mBAAmB,OAAO,UAAU;AA7C7C,QAAAA;AA8CI,iBAAa,OAAO,CAAC,OAAO,MAAM,CAAC;AACnC,cAAU,OAAO,yBAAyB,mBAAmB;AAG7D,QAAI,MAAM,WAAW,OAAO;AAC1B,aAAO,cAAc;AAAA,IACvB;AAGA,UAAM,WAAW,MAAM,eAAe;AAAA,MACpC,eAAe,aAAa,KAAK;AAAA,MACjC;AAAA,MACA,iBAAiB;AAAA,MACjB,KAAK;AAAA,IACP,CAAC;AAED,QAAI,oBAAoB,kBAAkB;AACxC,wBAAkB,OAAO,uBAAuB,QAAQ,CAAC;AACzD,YAAM,mBACJA,MAAA,KAAK,OAAO,OAAO,KAAK,KAAK,MAAM,EAAE,CAAC,CAAC,MAAvC,gBAAAA,IAA0C,KAAK,mBAC/C;AACF,aAAO,eAAe,QAAQ;AAAA,IAChC;AAEA,QAAI,SAAS,WAAW,KAAK;AAE3B,wBAAkB,OAAO,GAAG;AAC5B,aAAO;AAAA,IACT;AAEA,WAAO,SAAS,QAAQ;AAAA,EAC1B,CAAC;AACH;AAKO,IAAM,uBAAuB;","names":["_a"]}