{"version":3,"sources":["../src/express.ts","../src/internal/node-http/getBody.ts"],"sourcesContent":["import { Router as ExpressRouter } from \"express\";\nimport type {\n  Request as ExpressRequest,\n  Response as ExpressResponse,\n} from \"express\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport { initLogger, logger } from \"./internal/logger\";\nimport { getPostBody } from \"./internal/node-http/getBody\";\nimport { toWebRequest } from \"./internal/node-http/toWebRequest\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport type { FileRouter };\n\ntype MiddlewareArgs = {\n  req: ExpressRequest;\n  res: ExpressResponse;\n  event: undefined;\n};\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<MiddlewareArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n): ExpressRouter => {\n  initLogger(opts.config?.logLevel);\n  incompatibleNodeGuard();\n\n  const requestHandler = buildRequestHandler<TRouter, MiddlewareArgs>(\n    opts,\n    \"express\",\n  );\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n  const router = ExpressRouter();\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  router.post(\"/\", async (req, res) => {\n    const bodyResult = await getPostBody({ req });\n\n    if (!bodyResult.ok) {\n      logger.error(\n        \"Error parsing body. UploadThing expects a raw JSON body, make sure any body-parsing middlewares are registered after uploadthing.\",\n      );\n      res.status(400);\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(\n        JSON.stringify({\n          error: \"BAD_REQUEST\",\n          message: bodyResult.error.message,\n        }),\n      );\n\n      return;\n    }\n\n    const proto = (req.headers[\"x-forwarded-proto\"] as string) ?? \"http\";\n    const url = new URL(\n      req.baseUrl + req.url, // baseUrl is the mount point for the router, url is the path\n      `${proto}://${req.headers.host}`,\n    );\n\n    const response = await requestHandler({\n      nativeRequest: toWebRequest(req, url, bodyResult.data),\n      originalRequest: req,\n      res,\n      event: undefined,\n    });\n\n    if (response instanceof UploadThingError) {\n      res.status(getStatusCodeFromError(response));\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(JSON.stringify(formatError(response, opts.router)));\n      return;\n    }\n\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      res.status(500);\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(\"An unknown error occured\");\n\n      return;\n    }\n\n    res.status(response.status);\n    res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n    res.send(JSON.stringify(response.body));\n  });\n\n  router.get(\"/\", (_req, res) => {\n    res.status(200);\n    res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n\n    res.send(JSON.stringify(getBuildPerms()));\n  });\n\n  return router;\n};\n\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */\nexport const createUploadthingExpressHandler = createRouteHandler;\n","import type { IncomingMessage } from \"node:http\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { logger } from \"../logger\";\n\nexport type BodyResult =\n  | {\n      ok: true;\n      data: unknown;\n    }\n  | { ok: false; error: Error };\nexport type NodeHTTPRequest = IncomingMessage & {\n  body?: unknown;\n};\nexport async function getPostBody(opts: {\n  req: NodeHTTPRequest;\n  maxBodySize?: number;\n}): Promise<BodyResult> {\n  const { req, maxBodySize = Infinity } = opts;\n  return new Promise((resolve) => {\n    if (\"body\" in req) {\n      const contentType = req.headers[\"content-type\"];\n\n      if (contentType !== \"application/json\") {\n        logger.error(\"Expected JSON content type, got:\", contentType);\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_CONTENT_TYPE\",\n          }),\n        });\n        return;\n      }\n\n      if (typeof req.body !== \"object\") {\n        logger.error(\n          \"Expected body to be of type 'object', got:\",\n          typeof req.body,\n        );\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_BODY\",\n          }),\n        });\n        return;\n      }\n\n      logger.debug(\"Body parsed successfully.\", req.body);\n      resolve({\n        ok: true,\n        data: req.body,\n      });\n      return;\n    }\n    let body = \"\";\n    let hasBody = false;\n    req.on(\"data\", function (data) {\n      body += data;\n      hasBody = true;\n      if (body.length > maxBodySize) {\n        logger.error(\n          \"Body too large, max size is\",\n          maxBodySize,\n          \"bytes but received\",\n          body.length,\n          \"bytes\",\n        );\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"PAYLOAD_TOO_LARGE\",\n          }),\n        });\n        req.socket.destroy();\n      }\n    });\n    req.on(\"end\", () => {\n      let parsedBody: unknown;\n      try {\n        logger.debug(\"Finished reading body, parsing as JSON\", body);\n        parsedBody = JSON.parse(body);\n      } catch (e) {\n        logger.error(\"Error parsing JSON:\", body);\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_JSON\",\n            cause: e,\n          }),\n        });\n        return;\n      }\n\n      logger.debug(\"Body parsed successfully.\", parsedBody);\n      resolve({\n        ok: true,\n        data: hasBody ? parsedBody : undefined,\n      });\n    });\n  });\n}\n"],"mappings":"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","names":["UploadThingError","UploadThingError"]}