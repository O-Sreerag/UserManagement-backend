import { ResponseWithCleanup } from './server.js';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json } from '@uploadthing/shared';
import { NextRequest } from 'next/server';
import { C as CreateBuilderOptions, R as RouterWithConfig } from './upload-builder-e4cab397.js';
import { U as UploadBuilder, F as FileRouter } from './types-b5a44cf1.js';
import 'undici';

declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape> | undefined) => (input: _uploadthing_shared.FileRouterInputConfig) => UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _middlewareArgs: {
        req: NextRequest;
        res: undefined;
        event: undefined;
    };
    _errorShape: TErrorShape;
    _errorFn: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _output: "unsetMarker" & {
        __brand: "unsetMarker";
    };
}>;
declare const createRouteHandler: <TRouter extends FileRouter>(opts: RouterWithConfig<TRouter>) => {
    POST: (req: NextRequest) => Promise<Response | ResponseWithCleanup>;
    GET: (req: NextRequest) => Response;
};
/**
 * @deprecated Use {@link createRouteHandler} instead
 */
declare const createNextRouteHandler: <TRouter extends FileRouter>(opts: RouterWithConfig<TRouter>) => {
    POST: (req: NextRequest) => Promise<Response | ResponseWithCleanup>;
    GET: (req: NextRequest) => Response;
};

export { FileRouter, createNextRouteHandler, createRouteHandler, createUploadthing };
