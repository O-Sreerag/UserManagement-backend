import {
  toWebRequest
} from "./chunk-EMWTWK2B.mjs";
import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  formatError,
  incompatibleNodeGuard,
  initLogger,
  logger
} from "./chunk-VF56OB6T.mjs";
import "./chunk-4QCB7YXI.mjs";
import "./chunk-JW5CQVQS.mjs";

// src/express.ts
import { Router as ExpressRouter } from "express";
import { getStatusCodeFromError, UploadThingError as UploadThingError2 } from "@uploadthing/shared";

// src/internal/node-http/getBody.ts
import { UploadThingError } from "@uploadthing/shared";
async function getPostBody(opts) {
  const { req, maxBodySize = Infinity } = opts;
  return new Promise((resolve) => {
    if ("body" in req) {
      const contentType = req.headers["content-type"];
      if (contentType !== "application/json") {
        logger.error("Expected JSON content type, got:", contentType);
        resolve({
          ok: false,
          error: new UploadThingError({
            code: "BAD_REQUEST",
            message: "INVALID_CONTENT_TYPE"
          })
        });
        return;
      }
      if (typeof req.body !== "object") {
        logger.error(
          "Expected body to be of type 'object', got:",
          typeof req.body
        );
        resolve({
          ok: false,
          error: new UploadThingError({
            code: "BAD_REQUEST",
            message: "INVALID_BODY"
          })
        });
        return;
      }
      logger.debug("Body parsed successfully.", req.body);
      resolve({
        ok: true,
        data: req.body
      });
      return;
    }
    let body = "";
    let hasBody = false;
    req.on("data", function(data) {
      body += data;
      hasBody = true;
      if (body.length > maxBodySize) {
        logger.error(
          "Body too large, max size is",
          maxBodySize,
          "bytes but received",
          body.length,
          "bytes"
        );
        resolve({
          ok: false,
          error: new UploadThingError({
            code: "BAD_REQUEST",
            message: "PAYLOAD_TOO_LARGE"
          })
        });
        req.socket.destroy();
      }
    });
    req.on("end", () => {
      let parsedBody;
      try {
        logger.debug("Finished reading body, parsing as JSON", body);
        parsedBody = JSON.parse(body);
      } catch (e) {
        logger.error("Error parsing JSON:", body);
        resolve({
          ok: false,
          error: new UploadThingError({
            code: "BAD_REQUEST",
            message: "INVALID_JSON",
            cause: e
          })
        });
        return;
      }
      logger.debug("Body parsed successfully.", parsedBody);
      resolve({
        ok: true,
        data: hasBody ? parsedBody : void 0
      });
    });
  });
}

// src/express.ts
var createUploadthing = (opts) => createBuilder(opts);
var createRouteHandler = (opts) => {
  var _a;
  initLogger((_a = opts.config) == null ? void 0 : _a.logLevel);
  incompatibleNodeGuard();
  const requestHandler = buildRequestHandler(
    opts,
    "express"
  );
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  const router = ExpressRouter();
  router.post("/", async (req, res) => {
    const bodyResult = await getPostBody({ req });
    if (!bodyResult.ok) {
      logger.error(
        "Error parsing body. UploadThing expects a raw JSON body, make sure any body-parsing middlewares are registered after uploadthing."
      );
      res.status(400);
      res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
      res.send(
        JSON.stringify({
          error: "BAD_REQUEST",
          message: bodyResult.error.message
        })
      );
      return;
    }
    const proto = req.headers["x-forwarded-proto"] ?? "http";
    const url = new URL(
      req.baseUrl + req.url,
      // baseUrl is the mount point for the router, url is the path
      `${proto}://${req.headers.host}`
    );
    const response = await requestHandler({
      nativeRequest: toWebRequest(req, url, bodyResult.data),
      originalRequest: req,
      res,
      event: void 0
    });
    if (response instanceof UploadThingError2) {
      res.status(getStatusCodeFromError(response));
      res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
      res.send(JSON.stringify(formatError(response, opts.router)));
      return;
    }
    if (response.status !== 200) {
      res.status(500);
      res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
      res.send("An unknown error occured");
      return;
    }
    res.status(response.status);
    res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
    res.send(JSON.stringify(response.body));
  });
  router.get("/", (_req, res) => {
    res.status(200);
    res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
    res.send(JSON.stringify(getBuildPerms()));
  });
  return router;
};
var createUploadthingExpressHandler = createRouteHandler;
export {
  createRouteHandler,
  createUploadthing,
  createUploadthingExpressHandler
};
//# sourceMappingURL=express.mjs.map