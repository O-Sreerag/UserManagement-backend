{"version":3,"sources":["../src/server.ts","../src/sdk/index.ts","../src/sdk/utils.ts"],"sourcesContent":["import { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\nimport type { Json } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport { initLogger } from \"./internal/logger\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport * from \"./internal/types\";\nexport { UTApi } from \"./sdk\";\nexport { UploadThingError };\n\ntype MiddlewareArgs = { req: Request; res: undefined; event: undefined };\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<MiddlewareArgs, TErrorShape>(opts);\n\nexport interface ResponseWithCleanup extends Response {\n  /** custom property where a Promise may be put that you can await in for example Cloudflare Workers */\n  cleanup?: Promise<unknown>;\n}\n\n/** @internal */\nexport const INTERNAL_DO_NOT_USE_createRouteHandlerCore = <\n  TRouter extends FileRouter,\n>(\n  opts: RouterWithConfig<TRouter>,\n  adapter: string,\n) => {\n  initLogger(opts.config?.logLevel);\n  incompatibleNodeGuard();\n\n  const requestHandler = buildRequestHandler<TRouter, MiddlewareArgs>(\n    opts,\n    adapter,\n  );\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  const POST = async (\n    request: Request | { request: Request },\n  ): Promise<Response | ResponseWithCleanup> => {\n    const req = request instanceof Request ? request : request.request;\n    const response = await requestHandler({\n      nativeRequest: req,\n      originalRequest: req,\n      event: undefined,\n      res: undefined,\n    });\n\n    if (response instanceof UploadThingError) {\n      return new Response(JSON.stringify(formatError(response, opts.router)), {\n        status: getStatusCodeFromError(response),\n        headers: {\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        },\n      });\n    }\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      return new Response(\"An unknown error occured\", {\n        status: 500,\n        headers: {\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        },\n      });\n    }\n\n    const res = new Response(JSON.stringify(response.body), {\n      status: response.status,\n      headers: {\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n    // @ts-expect-error - this is a custom property\n    res.cleanup = response.cleanup;\n    return res as ResponseWithCleanup;\n  };\n\n  const GET = (request: Request | { request: Request }) => {\n    const _req = request instanceof Request ? request : request.request;\n\n    return new Response(JSON.stringify(getBuildPerms()), {\n      status: 200,\n      headers: {\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n  };\n\n  return { GET, POST };\n};\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => INTERNAL_DO_NOT_USE_createRouteHandlerCore(opts, \"server\");\n\nexport const extractRouterConfig = (router: FileRouter) =>\n  buildPermissionsInfoHandler({ router })();\n\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */\nexport const createServerHandler = createRouteHandler;\n","import { process } from \"std-env\";\n\nimport type {\n  ACL,\n  ContentDisposition,\n  FetchEsque,\n  Json,\n  MaybeUrl,\n} from \"@uploadthing/shared\";\nimport { generateUploadThingURL, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport { incompatibleNodeGuard } from \"../internal/incompat-node-guard\";\nimport type { LogLevel } from \"../internal/logger\";\nimport { initLogger, logger } from \"../internal/logger\";\nimport type { FileEsque, Time, UploadFileResponse } from \"./utils\";\nimport {\n  getApiKeyOrThrow,\n  guardServerOnly,\n  parseTimeToSeconds,\n  uploadFilesInternal,\n} from \"./utils\";\n\nexport interface UTApiOptions {\n  /**\n   * Provide a custom fetch function.\n   * @default globalThis.fetch\n   */\n  fetch?: FetchEsque;\n  /**\n   * Provide a custom UploadThing API key.\n   * @default process.env.UPLOADTHING_SECRET\n   */\n  apiKey?: string;\n  /**\n   * @default \"info\"\n   */\n  logLevel?: LogLevel;\n}\n\nexport class UTApi {\n  private fetch: FetchEsque;\n  private apiKey: string | undefined;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(opts?: UTApiOptions) {\n    this.fetch = opts?.fetch ?? globalThis.fetch;\n    this.apiKey = opts?.apiKey ?? process.env.UPLOADTHING_SECRET;\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": this.apiKey!,\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      \"x-uploadthing-be-adapter\": \"server-sdk\",\n    };\n\n    initLogger(opts?.logLevel);\n\n    // Assert some stuff\n    guardServerOnly();\n    getApiKeyOrThrow(this.apiKey);\n    if (!this.apiKey?.startsWith(\"sk_\")) {\n      throw new UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Invalid API key. API keys must start with `sk_`.\",\n      });\n    }\n    incompatibleNodeGuard();\n  }\n\n  private async requestUploadThing<T extends Record<string, unknown>>(\n    pathname: `/${string}`,\n    body: Record<string, unknown>,\n    fallbackErrorMessage: string,\n  ) {\n    const url = generateUploadThingURL(pathname);\n    logger.debug(\"Requesting UploadThing:\", {\n      url,\n      body,\n      headers: this.defaultHeaders,\n    });\n    const res = await this.fetch(url, {\n      method: \"POST\",\n      cache: \"no-store\",\n      headers: this.defaultHeaders,\n      body: JSON.stringify(body),\n    });\n    logger.debug(\"UploadThing responsed with status:\", res.status);\n\n    const json = await res.json<T | { error: string }>();\n    if (!res.ok || \"error\" in json) {\n      logger.error(\"Error:\", json);\n      throw new UploadThingError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message:\n          \"error\" in json && typeof json.error === \"string\"\n            ? json.error\n            : fallbackErrorMessage,\n      });\n    }\n\n    logger.debug(\"UploadThing response:\", json);\n    return json;\n  }\n\n  /**\n   * Upload files to UploadThing storage.\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */\n  async uploadFiles<T extends FileEsque | FileEsque[]>(\n    files: T,\n    opts?: {\n      metadata?: Json;\n      contentDisposition?: ContentDisposition;\n      acl?: ACL;\n    },\n  ) {\n    guardServerOnly();\n\n    const filesToUpload: FileEsque[] = Array.isArray(files) ? files : [files];\n    logger.debug(\"Uploading files:\", filesToUpload);\n\n    const uploads = await uploadFilesInternal(\n      {\n        files: filesToUpload,\n        metadata: opts?.metadata ?? {},\n        contentDisposition: opts?.contentDisposition ?? \"inline\",\n        acl: opts?.acl,\n      },\n      {\n        fetch: this.fetch,\n        utRequestHeaders: this.defaultHeaders,\n      },\n    );\n\n    const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n    logger.debug(\"Finished uploading:\", uploadFileResponse);\n\n    return uploadFileResponse as T extends FileEsque[]\n      ? UploadFileResponse[]\n      : UploadFileResponse;\n  }\n\n  /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */\n  async uploadFilesFromUrl<T extends MaybeUrl | MaybeUrl[]>(\n    urls: T,\n    opts?: {\n      metadata: Json;\n      contentDisposition: ContentDisposition;\n      acl?: ACL;\n    },\n  ) {\n    guardServerOnly();\n\n    const fileUrls: MaybeUrl[] = Array.isArray(urls) ? urls : [urls];\n\n    const formData = new FormData();\n    formData.append(\"metadata\", JSON.stringify(opts?.metadata ?? {}));\n\n    const filesToUpload = await Promise.all(\n      fileUrls.map(async (url) => {\n        if (typeof url === \"string\") url = new URL(url);\n        const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n\n        // Download the file on the user's server to avoid egress charges\n        logger.debug(\"Downloading file:\", url);\n        const fileResponse = await this.fetch(url);\n        if (!fileResponse.ok) {\n          throw new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Failed to download requested file.\",\n            cause: fileResponse,\n          });\n        }\n        logger.debug(\"Finished downloading file. Reading blob...\");\n        const blob = await fileResponse.blob();\n        logger.debug(\"Finished reading blob.\");\n        return Object.assign(blob, { name: filename });\n      }),\n    );\n\n    logger.debug(\"All files downloaded, uploading...\");\n\n    const uploads = await uploadFilesInternal(\n      {\n        files: filesToUpload,\n        metadata: opts?.metadata ?? {},\n        contentDisposition: opts?.contentDisposition ?? \"inline\",\n        acl: opts?.acl,\n      },\n      {\n        fetch: this.fetch,\n        utRequestHeaders: this.defaultHeaders,\n      },\n    );\n\n    const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n\n    logger.debug(\"Finished uploading:\", uploadFileResponse);\n    return uploadFileResponse as T extends MaybeUrl[]\n      ? UploadFileResponse[]\n      : UploadFileResponse;\n  }\n\n  /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */\n  async deleteFiles(fileKeys: string[] | string) {\n    guardServerOnly();\n\n    if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n    return this.requestUploadThing<{ success: boolean }>(\n      \"/api/deleteFile\",\n      { fileKeys },\n      \"An unknown error occured while deleting files.\",\n    );\n  }\n\n  /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */\n  async getFileUrls(fileKeys: string[] | string) {\n    guardServerOnly();\n\n    if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n    const json = await this.requestUploadThing<{\n      data: { key: string; url: string }[];\n    }>(\n      \"/api/getFileUrl\",\n      { fileKeys },\n      \"An unknown error occured while retrieving file URLs.\",\n    );\n\n    return json.data;\n  }\n\n  /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */\n  async listFiles(opts: { limit?: number; offset?: number }) {\n    guardServerOnly();\n\n    const json = await this.requestUploadThing<{\n      files: {\n        key: string;\n        id: string;\n        status: \"Deletion Pending\" | \"Failed\" | \"Uploaded\" | \"Uploading\";\n      }[];\n    }>(\"/api/listFiles\", opts, \"An unknown error occured while listing files.\");\n\n    return json.files;\n  }\n\n  async renameFiles(\n    updates:\n      | {\n          fileKey: string;\n          newName: string;\n        }\n      | {\n          fileKey: string;\n          newName: string;\n        }[],\n  ) {\n    guardServerOnly();\n\n    if (!Array.isArray(updates)) updates = [updates];\n\n    return this.requestUploadThing<{ success: true }>(\n      \"/api/renameFiles\",\n      { updates },\n      \"An unknown error occured while renaming files.\",\n    );\n  }\n  /** @deprecated Use {@link renameFiles} instead. */\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  public renameFile = this.renameFiles;\n\n  async getUsageInfo() {\n    guardServerOnly();\n\n    return this.requestUploadThing<{\n      totalBytes: number;\n      totalReadable: string;\n      appTotalBytes: number;\n      appTotalReadable: string;\n      filesUploaded: number;\n      limitBytes: number;\n      limitReadable: string;\n    }>(\n      \"/api/getUsageInfo\",\n      {},\n      \"An unknown error occured while getting usage info.\",\n    );\n  }\n\n  /** Request a presigned url for a private file(s) */\n  async getSignedURL(\n    fileKey: string,\n    opts?: {\n      /**\n       * How long the URL will be valid for.\n       * - Must be positive and less than 7 days (604800 seconds).\n       * - You must accept overrides on the UploadThing dashboard for this option to be accepted.\n       * @default app default on UploadThing dashboard\n       */\n      expiresIn?: Time;\n    },\n  ) {\n    guardServerOnly();\n\n    const expiresIn = opts?.expiresIn\n      ? parseTimeToSeconds(opts.expiresIn)\n      : undefined;\n\n    if (opts?.expiresIn && isNaN(expiresIn!)) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message:\n          \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\",\n      });\n    }\n    if (expiresIn && expiresIn > 86400 * 7) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"expiresIn must be less than 7 days (604800 seconds).\",\n      });\n    }\n\n    const json = await this.requestUploadThing<{ url: string }>(\n      \"/api/requestFileAccess\",\n      { fileKey, expiresIn },\n      \"An unknown error occured while retrieving presigned URLs.\",\n    );\n\n    return json.url;\n  }\n}\n","import { process } from \"std-env\";\nimport type { File as UndiciFile } from \"undici\";\n\nimport type {\n  ACL,\n  ContentDisposition,\n  FetchEsque,\n  Json,\n} from \"@uploadthing/shared\";\nimport {\n  generateUploadThingURL,\n  pollForFileData,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport { logger } from \"../internal/logger\";\nimport { uploadPart } from \"../internal/multi-part\";\nimport type { UTEvents } from \"../server\";\n\nexport function guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\",\n    });\n  }\n}\n\nexport function getApiKeyOrThrow(apiKey?: string) {\n  if (apiKey) return apiKey;\n  if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n\n  throw new UploadThingError({\n    code: \"MISSING_ENV\",\n    message: \"Missing `UPLOADTHING_SECRET` env variable.\",\n  });\n}\n\nexport type FileEsque = (Blob & { name: string }) | UndiciFile;\n\nexport type UploadData = {\n  key: string;\n  url: string;\n  name: string;\n  size: number;\n};\n\nexport type UploadError = {\n  code: string;\n  message: string;\n  data: any;\n};\n\nexport type UploadFileResponse =\n  | { data: UploadData; error: null }\n  | { data: null; error: UploadError };\n\nexport const uploadFilesInternal = async (\n  data: {\n    files: FileEsque[];\n    metadata: Json;\n    contentDisposition: ContentDisposition;\n    acl?: ACL;\n  },\n  opts: {\n    fetch: FetchEsque;\n    utRequestHeaders: Record<string, string>;\n  },\n) => {\n  // Request presigned URLs for each file\n  const fileData = data.files.map((file) => ({\n    name: file.name ?? \"unnamed-blob\",\n    type: file.type,\n    size: file.size,\n  }));\n  logger.debug(\"Getting presigned URLs for files\", fileData);\n  const res = await opts.fetch(generateUploadThingURL(\"/api/uploadFiles\"), {\n    method: \"POST\",\n    headers: opts.utRequestHeaders,\n    cache: \"no-store\",\n    body: JSON.stringify({\n      files: fileData,\n      metadata: data.metadata,\n      contentDisposition: data.contentDisposition,\n      acl: data.acl,\n    }),\n  });\n\n  if (!res.ok) {\n    const error = await UploadThingError.fromResponse(res);\n    logger.debug(\"Failed getting presigned URLs:\", error);\n    throw error;\n  }\n\n  if (!res.ok) {\n    const error = await UploadThingError.fromResponse(res);\n    logger.debug(\"Failed getting presigned URLs:\", error);\n    throw error;\n  }\n\n  const json = await res.json<{\n    data: {\n      presignedUrls: string[];\n      key: string;\n      fileUrl: string;\n      fileType: string;\n      uploadId: string;\n      chunkSize: number;\n      chunkCount: number;\n    }[];\n  }>();\n\n  logger.debug(\"Got presigned URLs:\", json.data);\n  logger.debug(\"Starting uploads...\");\n\n  // Upload each file to S3 in chunks using multi-part uploads\n  const uploads = await Promise.allSettled(\n    data.files.map(async (file, i) => {\n      const { presignedUrls, key, fileUrl, uploadId, chunkSize } = json.data[i];\n\n      if (!presignedUrls || !Array.isArray(presignedUrls)) {\n        logger.error(\n          \"Failed to generate presigned URL for file:\",\n          file,\n          json.data[i],\n        );\n        throw new UploadThingError({\n          code: \"URL_GENERATION_FAILED\",\n          message: \"Failed to generate presigned URL\",\n          cause: JSON.stringify(json.data[i]),\n        });\n      }\n\n      logger.debug(\n        \"Uploading file\",\n        file.name,\n        \"with\",\n        presignedUrls.length,\n        \"chunks of size\",\n        chunkSize,\n        \"bytes each\",\n      );\n\n      const etags = await Promise.all(\n        presignedUrls.map(async (url, index) => {\n          const offset = chunkSize * index;\n          const end = Math.min(offset + chunkSize, file.size);\n          const chunk = file.slice(offset, end);\n\n          const etag = await uploadPart({\n            fetch: opts.fetch,\n            url,\n            chunk: chunk as Blob,\n            contentDisposition: data.contentDisposition,\n            contentType: file.type,\n            fileName: file.name,\n            maxRetries: 10,\n            key,\n            utRequestHeaders: opts.utRequestHeaders,\n          });\n\n          logger.debug(\"Part\", index + 1, \"uploaded successfully:\", etag);\n\n          return { tag: etag, partNumber: index + 1 };\n        }),\n      );\n\n      logger.debug(\n        \"File\",\n        file.name,\n        \"uploaded successfully. Notifying UploadThing to complete multipart upload.\",\n      );\n\n      // Complete multipart upload\n      const completionRes = await opts.fetch(\n        generateUploadThingURL(\"/api/completeMultipart\"),\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            fileKey: key,\n            uploadId,\n            etags,\n          } satisfies UTEvents[\"multipart-complete\"]),\n          headers: opts.utRequestHeaders,\n        },\n      );\n\n      logger.debug(\"UploadThing responsed with status:\", completionRes.status);\n      logger.debug(\"Polling for file data...\");\n\n      // Poll for file to be available\n      await pollForFileData({\n        url: generateUploadThingURL(`/api/pollUpload/${key}`),\n        apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n        sdkVersion: UPLOADTHING_VERSION,\n        fetch: opts.fetch,\n      });\n\n      logger.debug(\"Polling complete.\");\n\n      return {\n        key,\n        url: fileUrl,\n        name: file.name,\n        size: file.size,\n      };\n    }),\n  );\n\n  logger.debug(\"All uploads complete, aggregating results...\");\n\n  return uploads.map((upload) => {\n    if (upload.status === \"fulfilled\") {\n      const data = upload.value satisfies UploadData;\n      return { data, error: null };\n    }\n    // We only throw UploadThingErrors, so this is safe\n    const reason = upload.reason as UploadThingError;\n    const error = UploadThingError.toObject(reason) satisfies UploadError;\n    return { data: null, error };\n  });\n};\n\ntype TimeShort = \"s\" | \"m\" | \"h\" | \"d\";\ntype TimeLong = \"second\" | \"minute\" | \"hour\" | \"day\";\ntype SuggestedNumbers = 2 | 3 | 4 | 5 | 6 | 7 | 10 | 15 | 30 | 60;\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype AutoCompleteableNumber = SuggestedNumbers | (number & {});\nexport type Time =\n  | number\n  | `1${TimeShort}`\n  | `${AutoCompleteableNumber}${TimeShort}`\n  | `1 ${TimeLong}`\n  | `${AutoCompleteableNumber} ${TimeLong}s`;\n\nexport function parseTimeToSeconds(time: Time) {\n  const match = time.toString().split(/(\\d+)/).filter(Boolean);\n  const num = Number(match[0]);\n  const unit = (match[1] ?? \"s\").trim().slice(0, 1) as TimeShort;\n\n  const multiplier = {\n    s: 1,\n    m: 60,\n    h: 3600,\n    d: 86400,\n  }[unit];\n\n  return num * multiplier;\n}\n"],"mappings":"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","names":["UploadThingError","process","generateUploadThingURL","UploadThingError","data","process","UploadThingError","generateUploadThingURL","UploadThingError"]}